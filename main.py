import asyncio
import os
import re
import tempfile
from concurrent.futures import ThreadPoolExecutor
from functools import partial
from pathlib import Path
from typing import Optional, Tuple, List
from urllib.parse import urlparse

from telegram import Update, InputFile, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# ===== –û–∫—Ä—É–∂–µ–Ω–∏–µ =====
BOT_TOKEN = os.getenv("DOWNLOADER_BOT_TOKEN")

# Cookie-—Ñ–∞–π–ª—ã (Netscape —Ñ–æ—Ä–º–∞—Ç)
YT_COOKIE_FILE = "cookies.txt"
IG_COOKIE_FILE = os.getenv("IG_COOKIE_FILE", "")
YT_COOKIES = Path(YT_COOKIE_FILE).expanduser() if YT_COOKIE_FILE else None
IG_COOKIES = Path(IG_COOKIE_FILE).expanduser() if IG_COOKIE_FILE else None

# ===== –ö–Ω–æ–ø–∫–∏ (–ø–æ–¥—Å–∫–∞–∑–∫–∏, –Ω–µ ¬´—Ä–µ–∂–∏–º—ã¬ª) =====
BTN_IG = "üü£ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –∏–∑ Instagram"
BTN_YT = "üî¥ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–≤—É–∫ –∏–∑ –≤–∏–¥–µ–æ YouTube"
KB = ReplyKeyboardMarkup([[KeyboardButton(BTN_IG)], [KeyboardButton(BTN_YT)]], resize_keyboard=True)

# ===== –†–µ–≥–µ–∫—Å—ã =====
YOUTUBE_REGEX = re.compile(
    r"(https?://(?:www\.)?(?:youtube\.com/(?:watch\?v=|shorts/)[\w-]{11}|youtu\.be/[\w-]{11}))",
    re.IGNORECASE,
)
INSTAGRAM_REGEX = re.compile(
    r"(https?://(?:www\.)?instagram\.com/(?:reel|p|tv)/[A-Za-z0-9_\-]+/?(?:\?[^\s#]*)?)",
    re.IGNORECASE,
)

MAX_MB_HINT = 45


# ========== YouTube: –∑–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ ==========
def _yt_download_audio_sync(url: str, outdir: Path, cookiefile: Optional[Path]) -> Tuple[Path, Optional[Path], dict]:
    import yt_dlp
    outtmpl = str(outdir / "%(title).200B [%(id)s].%(ext)s")
    ydl_opts = {
        "quiet": True,
        "noprogress": True,
        "format": "bestaudio/best",
        "outtmpl": outtmpl,
        "noplaylist": True,
        "writethumbnail": True,
        "postprocessors": [{"key": "FFmpegExtractAudio", "preferredcodec": "mp3", "preferredquality": "128"}],
        "postprocessor_args": ["-id3v2_version", "3"],
        "retries": 3,
        "extractor_retries": 3,
        "sleep_interval_requests": 0.5,
        "http_headers": {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0 Safari/537.36",
            "Accept-Language": "en-US,en;q=0.9",
        },
        "extractor_args": {"youtube": {"player_client": ["web"]}},  # —Å cookies –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ web
    }
    if cookiefile and cookiefile.exists():
        ydl_opts["cookiefile"] = str(cookiefile)

    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=True)

    vid = info.get("id")
    mp3 = next(outdir.glob(f"*{vid}*.mp3"), None)
    if not mp3:
        raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω –∏—Ç–æ–≥–æ–≤—ã–π MP3 –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
    thumb = None
    for ext in (".jpg", ".png", ".webp"):
        t = next(outdir.glob(f"*{vid}*{ext}"), None)
        if t:
            thumb = t
            break
    return mp3, thumb, info


async def yt_download_audio(url: str, cookiefile: Optional[Path], loop: asyncio.AbstractEventLoop):
    with tempfile.TemporaryDirectory(prefix="ytmp3_") as td:
        outdir = Path(td)
        executor = ThreadPoolExecutor(max_workers=1)
        try:
            audio_path, thumb_path, info = await loop.run_in_executor(
                executor, partial(_yt_download_audio_sync, url, outdir, cookiefile)
            )
            final_dir = Path(tempfile.gettempdir()) / f"ytmp3_done_{os.getpid()}"
            final_dir.mkdir(exist_ok=True)
            audio_dst = final_dir / audio_path.name
            audio_path.replace(audio_dst)

            thumb_dst = None
            if thumb_path and thumb_path.exists():
                thumb_dst = final_dir / thumb_path.name
                thumb_path.replace(thumb_dst)

            return audio_dst, thumb_dst, info
        finally:
            executor.shutdown(wait=True)


# ========== Instagram: –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ ==========
def _ig_download_video_sync(url: str, outdir: Path, cookiefile: Optional[Path]) -> Tuple[Path, dict]:
    import yt_dlp
    outtmpl = str(outdir / "%(title).200B [%(id)s].%(ext)s")
    ydl_opts = {
        "quiet": True,
        "noprogress": True,
        "format": "bestvideo*+bestaudio/best",
        "merge_output_format": "mp4",
        "outtmpl": outtmpl,
        "retries": 3,
        "extractor_retries": 3,
        "sleep_interval_requests": 0.5,
        "http_headers": {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0 Safari/537.36",
            "Accept-Language": "en-US,en;q=0.9",
        },
    }
    if cookiefile and cookiefile.exists():
        ydl_opts["cookiefile"] = str(cookiefile)

    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=True)

    vid = info.get("id")
    video = next(outdir.glob(f"*{vid}*.mp4"), None)
    if not video:
        video = next(outdir.glob(f"*{vid}*"), None)
    if not video:
        raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω –∏—Ç–æ–≥–æ–≤—ã–π –≤–∏–¥–µ–æ—Ñ–∞–π–ª –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏.")
    return video, info


async def ig_download_video(url: str, cookiefile: Optional[Path], loop: asyncio.AbstractEventLoop):
    with tempfile.TemporaryDirectory(prefix="igvid_") as td:
        outdir = Path(td)
        executor = ThreadPoolExecutor(max_workers=1)
        try:
            video_path, info = await loop.run_in_executor(
                executor, partial(_ig_download_video_sync, url, outdir, cookiefile)
            )
            final_dir = Path(tempfile.gettempdir()) / f"igvid_done_{os.getpid()}"
            final_dir.mkdir(exist_ok=True)
            video_dst = final_dir / video_path.name
            video_path.replace(video_dst)
            return video_dst, info
        finally:
            executor.shutdown(wait=True)


# ===== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ =====
def extract_links(text: str) -> List[str]:
    """–î–æ—Å—Ç–∞—ë–º –≤—Å–µ IG/YT —Å—Å—ã–ª–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–≤ –ª—é–±–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ, –±–µ–∑ ¬´—Ä–µ–∂–∏–º–æ–≤¬ª)."""
    links = []
    links += [m[0] if isinstance(m, tuple) else m for m in YOUTUBE_REGEX.findall(text or "")]
    links += [m[0] if isinstance(m, tuple) else m for m in INSTAGRAM_REGEX.findall(text or "")]
    return links


def canonical_ig(url: str) -> str:
    """–ü—Ä–∏–≤–æ–¥–∏–º IG-—Å—Å—ã–ª–∫—É –∫ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–º—É –≤–∏–¥—É (–æ–±—Ä–µ–∑–∞–µ–º query/fragment)."""
    m = re.search(r"(instagram\.com/(reel|p|tv)/([A-Za-z0-9_\-]+))", url, re.IGNORECASE)
    if not m:
        return url
    return f"https://www.{m.group(1)}/"


# ===== UI / Handlers =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É (Instagram/YouTube) ‚Äî –±–æ—Ç —Å–∞–º –ø–æ–π–º—ë—Ç –∏ —Å–∫–∞—á–∞–µ—Ç.\n"
        "–ö–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Å–∫–∞–∑–∫–∏.",
        reply_markup=KB,
    )


async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)


async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()

    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º –∫–æ—Ä–æ—Ç–∫—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
    if text == BTN_IG:
        await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Instagram (reel/p/tv) ‚Äî –ø—Ä–∏—à–ª—é –≤–∏–¥–µ–æ.", reply_markup=KB)
        return
    if text == BTN_YT:
        await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube (watch/shorts/youtu.be) ‚Äî –ø—Ä–∏—à–ª—é MP3.", reply_markup=KB)
        return

    # –õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç ‚Äî –ø—ã—Ç–∞–µ–º—Å—è –≤—ã—Ç–∞—â–∏—Ç—å —Å—Å—ã–ª–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏—Ö –ø–æ –æ—á–µ—Ä–µ–¥–∏
    links = extract_links(text)
    if not links:
        await update.message.reply_text("–°–∫–∏–Ω—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Instagram –∏–ª–∏ YouTube ‚Äî –æ–±—Ä–∞–±–æ—Ç–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.", reply_markup=KB)
        return

    loop = asyncio.get_event_loop()
    for url in links[:5]:  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ–≥—Ä–∞–Ω–∏—á–∏–º –ø–∞—á–∫—É
        if "instagram.com" in url.lower():
            url = canonical_ig(url)
            status = await update.message.reply_text("–°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ –∏–∑ Instagram‚Ä¶ ‚è≥")
            try:
                video_path, info = await ig_download_video(url, IG_COOKIES, loop)
                title = info.get("title") or "–í–∏–¥–µ–æ –∏–∑ Instagram"
                size_mb = video_path.stat().st_size / (1024 * 1024)
                caption = title + (f"\n(‚âà {size_mb:.1f} MB)" if size_mb > MAX_MB_HINT else "")
                await status.edit_text("–û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ‚Ä¶")
                try:
                    with video_path.open("rb") as f:
                        await update.message.reply_video(
                            video=InputFile(f, filename=video_path.name),
                            caption=caption,
                            supports_streaming=True,
                        )
                except Exception:
                    with video_path.open("rb") as f:
                        await update.message.reply_document(document=InputFile(f, filename=video_path.name), caption=caption)
                await status.delete()
            except Exception as e:
                try:
                    await status.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å/–∫—É–∫–∏ Instagram.")
                except Exception:
                    pass
                print("IG ERROR:", repr(e))
        else:
            # YouTube
            status = await update.message.reply_text("–°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ —Å YouTube‚Ä¶ ‚è≥")
            try:
                audio_path, thumb_path, info = await yt_download_audio(url, YT_COOKIES, loop)
                title = info.get("title") or "–ê—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ"
                duration = info.get("duration")
                size_mb = audio_path.stat().st_size / (1024 * 1024)

                caption = title
                if isinstance(duration, int):
                    caption += f" ‚Ä¢ {duration // 60}:{duration % 60:02d}"
                if size_mb > MAX_MB_HINT:
                    caption += f"\n(‚âà {size_mb:.1f} MB)"

                await status.edit_text("–û—Ç–ø—Ä–∞–≤–ª—è—é MP3‚Ä¶")
                try:
                    with audio_path.open("rb") as f:
                        thumb = None
                        if thumb_path and thumb_path.exists():
                            thumb = InputFile(thumb_path.open("rb"), filename=thumb_path.name)
                        await update.message.reply_audio(
                            audio=InputFile(f, filename=audio_path.name),
                            thumbnail=thumb,
                            caption=caption,
                            title=title,
                            duration=duration if isinstance(duration, int) else None,
                        )
                except Exception:
                    with audio_path.open("rb") as f:
                        await update.message.reply_document(document=InputFile(f, filename=audio_path.name), caption=caption)
                await status.delete()
            except Exception as e:
                try:
                    await status.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ. –û–±–Ω–æ–≤–∏—Ç–µ cookies YouTube –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                except Exception:
                    pass
                print("YT ERROR:", repr(e))


def main():
    if not BOT_TOKEN:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    if YT_COOKIES and not YT_COOKIES.exists():
        print(f"WARNING: YT_COOKIE_FILE —É–∫–∞–∑–∞–Ω, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω: {YT_COOKIES}")
    if IG_COOKIES and not IG_COOKIES.exists():
        print(f"WARNING: IG_COOKIE_FILE —É–∫–∞–∑–∞–Ω, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω: {IG_COOKIES}")

    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    # –í—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –≤ –µ–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    print("Bot is running. Press Ctrl+C to stop.")
    app.run_polling(close_loop=False)


if __name__ == "__main__":
    main()
